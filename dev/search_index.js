var documenterSearchIndex = {"docs":
[{"location":"api/#Actor-API","page":"Actor API","title":"Actor API","text":"","category":"section"},{"location":"api/","page":"Actor API","title":"Actor API","text":"CurrentModule = Actors","category":"page"},{"location":"api/#Installation","page":"Actor API","title":"Installation","text":"","category":"section"},{"location":"api/","page":"Actor API","title":"Actor API","text":"Actors\nActors.version","category":"page"},{"location":"api/#Actors.Actors","page":"Actor API","title":"Actors.Actors","text":"Actors\n\nA Julia library implementing the classical Actor Model.\n\nThe current stable, registered version is installed with\n\npkg> add Actors\n\nThe development version is installed with:\n\npkg> add(\"https://github.com/JuliaActors/Actors.jl\")\n\n\n\n\n\n","category":"module"},{"location":"api/#Actors.version","page":"Actor API","title":"Actors.version","text":"Gives the package version.\n\n\n\n\n\n","category":"constant"},{"location":"api/#Types","page":"Actor API","title":"Types","text":"","category":"section"},{"location":"api/","page":"Actor API","title":"Actor API","text":"Msg\nRequest\nResponse\nLink\nFunc\n_ACT","category":"page"},{"location":"api/#Actors.Msg","page":"Actor API","title":"Actors.Msg","text":"Abstract type for messages to actors.\n\n\n\n\n\n","category":"type"},{"location":"api/#Actors.Request","page":"Actor API","title":"Actors.Request","text":"Request(x, from::Link)\n\nA generic Msg for user requests.\n\n\n\n\n\n","category":"type"},{"location":"api/#Actors.Response","page":"Actor API","title":"Actors.Response","text":"Response(y, from::Link=self())\n\nA Msg representing a response to requests.\n\nFields\n\ny: response content,\nfrom::Link: sender link.\n\n\n\n\n\n","category":"type"},{"location":"api/#Actors.Link","page":"Actor API","title":"Actors.Link","text":"Link{C}(chn::C, pid::Int, type::Symbol)\n\nA mailbox for communicating with actors. A concrete type of this must be returned by an actor on creation with spawn.\n\nFields/Parameters\n\nchn::C: C can be any type and characterizes the interface   to an actor,\npid::Int: the pid of the actor, \ntype::Symbol: an arbitrary symbol characterizing the actor.\n\n\n\n\n\n","category":"type"},{"location":"api/#Actors.Func","page":"Actor API","title":"Actors.Func","text":"Func(f, args...; kwargs...)\n\nA structure for passing a function f and its arguments to an actor.\n\n\n\n\n\n","category":"type"},{"location":"api/#Actors._ACT","page":"Actor API","title":"Actors._ACT","text":"_ACT()\n\nInternal actor status variable.\n\nFields\n\nbhv::Func : the behavior function and its internal arguments,\ninit::Func: the init function and its arguments,\nterm::Func: the terminate function and its arguments,\nself::Link: the actor's (local or remote) self,\nname::Symbol: the actor's registered name.\nres::Any: the result of the last behavior execution,\nusr::Any: user variable for plugging in something.\n\nsee also: Func, Link\n\n\n\n\n\n","category":"type"},{"location":"api/#Primitives","page":"Actor API","title":"Primitives","text":"","category":"section"},{"location":"api/","page":"Actor API","title":"Actor API","text":"spawn\nsend!\nbecome!\nbecome\nself\nstop\nonmessage","category":"page"},{"location":"api/#Actors.spawn","page":"Actor API","title":"Actors.spawn","text":"spawn(bhv::Func; pid=myid(), thrd=false, sticky=false, taskref=nothing)\nspawn(m::Val(:Actors), args...; kwargs...)\nspawn(m::Module, args...; kwargs...)\n\nStart a function bhv as an actor and return a Link to it.\n\nParameters\n\nbhv::Func: behavior function,\npid=myid(): pid of worker process the actor should be started on,\nthrd=false: thread number the actor should be started on or false,\nsticky=false: if true the actor is started on the current thread,\ntaskref=nothing: if a Ref{Task}() is given here, it gets the started Task,\nm::Module: the Module implementing spawn.\n\n\n\n\n\n","category":"function"},{"location":"api/#Actors.send!","page":"Actor API","title":"Actors.send!","text":"send!(lk::Link, msg)\n\nSend a message to an actor.\n\n\n\n\n\n","category":"function"},{"location":"api/#Actors.become!","page":"Actor API","title":"Actors.become!","text":"become!(lk::Link, bhv::Func)\n\nTell an actor lk to assume the behavior function bhv.\n\n\n\n\n\n","category":"function"},{"location":"api/#Actors.become","page":"Actor API","title":"Actors.become","text":"become(bhv::Function, args...; kwargs...)\n\nCause your actor to take on a new behavior. This can only be called from inside an actor/behavior.\n\nArguments\n\nbhv::Function: function implementing the new behavior,\nargs...: arguments to bhv (without msg),\nkwargs...: keyword arguments to bhv.\n\n\n\n\n\n","category":"function"},{"location":"api/#Actors.self","page":"Actor API","title":"Actors.self","text":"self()\n\nGet the Link of your actor.\n\n\n\n\n\n","category":"function"},{"location":"api/#Actors.stop","page":"Actor API","title":"Actors.stop","text":"stop(reason::Symbol)\n\nCause your actor to stop with a reason.\n\n\n\n\n\n","category":"function"},{"location":"api/#Actors.onmessage","page":"Actor API","title":"Actors.onmessage","text":"onmessage(A::_ACT, msg)\n\nAn actor executes this function when a message arrives. An application can extend this by further methods and use  it to plugin the Actors.jl API.\n\n\n\n\n\n","category":"function"},{"location":"api/#User-API","page":"Actor API","title":"User API","text":"","category":"section"},{"location":"api/","page":"Actor API","title":"Actor API","text":"receive!\nrequest!","category":"page"},{"location":"api/#Actors.receive!","page":"Actor API","title":"Actors.receive!","text":"receive!(lk; timeout=5.0)\nreceive!(lk, from; timeout=5.0)\nreceive!(lk, M; timeout=5.0)\nreceive!(lk, M, from; timeout=5.0)\n\nReceive a message over a link lk.\n\nIf M or from are provided, receive! returns only a  matching message. Other messages in lk are restored to it in their previous order.\n\nParameters\n\nlk::Link: local or remote link over which the message is received,\nM::Type{<:Msg}: Msg type,\nfrom::Link: local or remote link of sender. If from is   provided, only messages with a from field can be matched.\ntimeout::Real=5.0: maximum waiting time in seconds.\nIf timeout==0, lk is scanned only for existing messages.\nSet timeout=Inf if you don't want to timeout. \n\nReturns\n\nreceived message or Timeout().\n\n\n\n\n\n","category":"function"},{"location":"api/#Actors.request!","page":"Actor API","title":"Actors.request!","text":"request!(lk::Link, msg::Msg; full=false, timeout::Real=5.0)\nrequest!(lk::Link, M::Type{<:Msg}, args...; kwargs...)\n\nSend a message to an actor, block, receive and return the result.\n\nArguments\n\nlk::Link: actor link, or name::Symbol (if registered),\nmsg::Msg: a message,\nMsg::Type{<:Msg}: a message type,\nargs...: optional arguments to Msg, \nfull: if true return the full Response message.\ntimeout::Real=5.0: timeout in seconds after which a    Timeout is returned,\nkwargs...: full or timeout.\n\n\n\n\n\n","category":"function"},{"location":"api/#Internal-Messages","page":"Actor API","title":"Internal Messages","text":"","category":"section"},{"location":"api/","page":"Actor API","title":"Actor API","text":"Become\nCall\nDiag\nExit\nUpdate\nTimeout","category":"page"},{"location":"api/#Actors.Become","page":"Actor API","title":"Actors.Become","text":"Become(x::Func)\n\nAn asynchronous Msg to an actor to change its  behavior.\n\n\n\n\n\n","category":"type"},{"location":"api/#Actors.Call","page":"Actor API","title":"Actors.Call","text":"Call(arg, from::Link)\n\nA synchronous Msg to an actor to execute its  behavior with arg... and to send the result as a Response  message to from.\n\n\n\n\n\n","category":"type"},{"location":"api/#Actors.Diag","page":"Actor API","title":"Actors.Diag","text":"Diag(from::Link)\n\nA synchronous Msg to an actor to send a  Response message with its internal _ACT variable to from.\n\n\n\n\n\n","category":"type"},{"location":"api/#Actors.Exit","page":"Actor API","title":"Actors.Exit","text":"Exit(reason, stack)\n\nA Msg causing an actor to stop with an exit code. If present, it calls its term! function with code as last argument.\n\n\n\n\n\n","category":"type"},{"location":"api/#Actors.Update","page":"Actor API","title":"Actors.Update","text":"Update(s::Symbol, x)\n\nAn asynchronous Msg to an actor to update its  internal state s to x.\n\ns::Symbol can be one of :arg, :self, :usr.\n\n\n\n\n\n","category":"type"},{"location":"api/#Actors.Timeout","page":"Actor API","title":"Actors.Timeout","text":"Timeout()\n\nA return value to signal that a timeout has occurred.\n\n\n\n\n\n","category":"type"},{"location":"api/#Diagnosis","page":"Actor API","title":"Diagnosis","text":"","category":"section"},{"location":"intro/#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"actors/#Actors","page":"Actors","title":"Actors","text":"","category":"section"},{"location":"actors/#Start","page":"Actors","title":"Start","text":"","category":"section"},{"location":"actors/#Links","page":"Actors","title":"Links","text":"","category":"section"},{"location":"actors/#Messages","page":"Actors","title":"Messages","text":"","category":"section"},{"location":"actors/#Behavior","page":"Actors","title":"Behavior","text":"","category":"section"},{"location":"actors/#Actor-Control","page":"Actors","title":"Actor Control","text":"","category":"section"},{"location":"interface/#Interface","page":"Interface","title":"Interface","text":"","category":"section"},{"location":"behaviors/#Behaviors","page":"Behaviors","title":"Behaviors","text":"","category":"section"},{"location":"behaviors/#Partial-Arguments","page":"Behaviors","title":"Partial Arguments","text":"","category":"section"},{"location":"behaviors/#Keyword-Arguments","page":"Behaviors","title":"Keyword Arguments","text":"","category":"section"},{"location":"#Actors.jl","page":"Home","title":"Actors.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Concurrent programming in Julia with the Actor model.","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A quick introduction to Actors,\nActors API: detailed documentation,\nInternals\nInterface for Julia actor libraries.","category":"page"},{"location":"#Group","page":"Home","title":"Group","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Actors is part of the Julia GitHub group JuliaActors.","category":"page"},{"location":"#Authors","page":"Home","title":"Authors","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Paul Bayer","category":"page"},{"location":"#License","page":"Home","title":"License","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Actors is licensed under the MIT License.","category":"page"}]
}
